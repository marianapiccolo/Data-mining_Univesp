# -*- coding: utf-8 -*-
"""week7_anomaly_detection.ipynb

Automatically generated by Colaboratory.

### Anomaly Detection

In this exercise, we will use algorithmic and statistical methods for anomaly detection. We will start with the Local Outlier Factor (LOF) algorithm using data generated with sklearn. Next, we'll use boxplot and histogram analysis, and we'll calculate the lower and upper bounds using quartiles in a California housing database, available at the sklearn library.

This exercise is based on the example taken from the article Anomaly Detection Example with Local Outlier Factor in Python (https://www.datatechnotes.com/2020/04/anomaly-detection-with-local-outlier-factor-in-python.html ) by Otabek Yorkinov, DataTechNotes.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.neighbors import LocalOutlierFactor # use the local outlier factor algorithm and to get dataset blobs
from sklearn.datasets import make_blobs # returns data and labels
plt.rcParams["figure.figsize"] = (15,10)

data, labels = make_blobs(n_samples = 200, centers = 1, n_features = 2, random_state = 0, center_box = (10, 10), cluster_std = .3)

data[:10]

# Distribution of data generated by make blobs
plt.scatter(data[:, 0], data[:, 1])
plt.show()

# Neighbor numbers and contamination to define the proportion of dataset anomalies
k_neighbors = 20
contamination = .03
lof = LocalOutlierFactor(n_neighbors=k_neighbors, contamination=contamination)

# Prediction
prediction = lof.fit_predict(data)

prediction

lof_index = np.where(prediction == -1) # -1 = anomalies
anomalies = data[lof_index]

fig, axis = plt.subplots()
axis.scatter(data[:, 0], data[:, 1]) # x and y
axis.scatter(anomalies[:,0], anomalies[:, 1], color = 'red') # anomalies

# anomalies coordinates
for i, text in enumerate(anomalies): 
  axis.annotate('{:.2f}'.format(text[0]) + ', '+'{:.2f}'.format(text[1]), (anomalies[i,0], anomalies[i,1]))
plt.show()

# 6 anomalies out of space, so the outlier local algorithm was useful in data classification.

"""### Statistical Methods

We are going to do anomaly detection using statistical methods like box plot, histogram analysis and lower and upper limits calculation using quartiles.

For this analysis we are going to use a California housing dataset and **pandas** to visualize the box plots. The **plotly** library will be used to also visualize an example histogram analysis along with the box plot.

This exercise was based on the example taken from the article [5 Easy Ways to Detect Outliers in Python](https://datasciencesphere.com/analytics/5-easy-ways-to-detect-outliers-in-python/) by Marc Bolle , Data Science 
Sphere.

California Census 1990 and the **plotly** library.
This database has the following attributes:
* **MedInc**: Median block income
* **HouseAge**: Median age of household
* **AveRooms**: Average rooms per household
* **AveBedrms**: Average rooms per residence
* **Population**: Residents of the block
* **AveOccup**: Average number of residents per household
* **Latitude** 
* **Longitude** 
"""

from sklearn.datasets import fetch_california_housing
import plotly.express as pe

data_california = fetch_california_housing(as_frame=True)
residence = data_california.data
residence.info()

residence.plot(kind='box', subplots = True, layout = (3,3), figsize = (15, 15))
plt.show()

# Average Income
fig_income = pe.histogram(residence, x = 'MedInc', marginal = 'box')
fig_income.show()

# Average rooms
fig_rooms = pe.histogram(residence, x = 'AveRooms', marginal = 'box')
fig_rooms.show()

# Scatterplot Average Rooms X Average Bedrooms
plt.scatter(residence['AveRooms'], residence['AveBedrms'], alpha = 0.5)
plt.xlabel('Rooms')
plt.ylabel('Bedrooms')
plt.title('Rooms X Bedrooms')
plt.show()

population = residence['Population']
population.head()

# Quartiles 1 and 3 and Interquartile Range
quartile1 = residence['Population'].quantile(0.25)
quartile3 = residence['Population'].quantile(0.75)
range_interquartile = quartile3 - quartile1
print('Q1: {}, Q3: {} and RI: {}'.format(quartile1, quartile3, range_interquartile))

# Upper and lower limits
sigma = 1.5
lower_limit = quartile1 - (range_interquartile * sigma)
upper_limit = quartile3 + (range_interquartile * sigma)
print('Lower limit: {}, Upper limit: {}'.format(lower_limit, upper_limit))

residence['Population'].plot(kind='box')
plt.show()

# No outliers
residence['Population'].plot(kind='box', showfliers = False)
plt.show()